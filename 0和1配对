//class Solution {
//    public int findMaxLength(int[] nums) {
//        int len=nums.length;
//        if(len<=1) return 0;
//        int count=0;
//        int maxLen=0;
//        HashMap<Integer,Integer> map=new HashMap<>();
//        map.put(0,-1);
//        for(int i=0; i<len; i++){
//            if(nums[i]==1) count++;
//            else if(nums[i]==0) count--;
//
//            if(map.containsKey(count)){
//                maxLen=Math.max(maxLen,i-map.get(count));//关键在这行代码
//            }else{
//                map.put(count,i);
//            }
//        }
//        return maxLen;
//    }
//}
class Solution1 {
    public int findMaxLength(int[] nums) {
        int len = nums.length;
        if(len < 2){
            return 0;
        }
        ///读了很久题目，便于理解的是把 0 当做 -1 看待，求数组n项总和为零最长长度
        int count = 0;//
        int maxlen = 0;//用于返回的长度
        HashMap<Integer,Integer> map = new HashMap<>();
        for (int i = 0;i < len;i++){//准备遍历整个数组
            if(nums[i] == 0){//
                count++;
            }else if (nums[i] == 1){
                count--;
            }
            if ()
        }
    }
}
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for (int i = 0;i < nums.length;i++){
            if(map.containsKey(nums[i])){//建立map表，同时将数组传入
                int tmp = map.get(nums[i]);
                map.put(nums[i],tmp + 1);
            }else {
                map.put(nums[i],1);
            }
        }//map此刻已经建好，现在需要判断存不存在大于1的value，现在准备遍历map表
        for (int i = 0;i < nums.length;i++){
            if(map.get(nums[i]) > 1){
                 return true;
            }
        }return false;
    }
}
public class HomeWork {
}
