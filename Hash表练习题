//给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组（的长度）
class Solution {
    public int findMaxLength(int[] nums) {
        int len=nums.length;
        if(len<=1) return 0;
        int count=0;
        int maxLen=0;
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,-1);
        for(int i=0; i<len; i++){
            if(nums[i]==1) count++;
            else if(nums[i]==0) count--;

            if(map.containsKey(count)){
                maxLen=Math.max(maxLen,i-map.get(count));//关键在这行代码
            }else{
                map.put(count,i);
            }
        }
        return maxLen;
    }
}
//给定一个整数数组，判断是否存在重复元素。
///
//如果任意一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for (int i = 0;i < nums.length;i++){
            if(map.containsKey(nums[i])){//建立map表，同时将数组传入
                int tmp = map.get(nums[i]);
                map.put(nums[i],tmp + 1);
            }else {
                map.put(nums[i],1);
            }
        }//map此刻已经建好，现在需要判断存不存在大于1的value，现在准备遍历map表
        for (int i = 0;i < nums.length;i++){
            if(map.get(nums[i]) > 1){
                 return true;
            }
        }return false;
    }
}
