import java.util.LinkedList;
import java.util.Queue;

class Node {
    public char val;
    public Node left;
    public Node right;

    public Node(char val) {
        this.val = val;
    }
}
 public class BinaryTree {

     public Node createTree() {
         Node A = new Node('A');
         Node B = new Node('B');
         Node C = new Node('C');
         Node D = new Node('D');
         Node E = new Node('E');
         Node F = new Node('F');
         Node G = new Node('G');
         Node H = new Node('H');
         A.left = B;
         A.right = C;
         B.left = D;
         B.right = E;
         E.right = H;
         C.left = F;
         C.right = G;
         return A;
     }

     // 前序遍历
     void preOrderTraversal(Node root) {
         if (root == null) return;
         System.out.print(root.val + " ");
         preOrderTraversal(root.left);
         preOrderTraversal(root.right);
     }

     // 中序遍历
     void inOrderTraversal(Node root) {
         if (root == null) return;
         inOrderTraversal(root.left);
         System.out.print(root.val + " ");
         inOrderTraversal(root.right);
     }

     // 后序遍历
     void postOrderTraversal(Node root) {
         if (root == null) return;
         postOrderTraversal(root.left);
         postOrderTraversal(root.right);
         System.out.print(root.val + " ");
     }

     // 遍历思路-求结点个数
     static int size = 0;

     void getSize1(Node root) {
         if (root == null) return;
         size++;
         getSize1(root.left);
         getSize1(root.right);
     }

     // 子问题思路-求结点个数
     int getSize2(Node root) {
         if (root == null) return 0;
         return getSize2(root.left) + getSize2(root.right) + 1;
     }

     // 遍历思路-求叶子结点个数
     static int leafSize = 0;

     void getLeafSize1(Node root) {
         if (root == null) return;
         if (root.left == null && root.right == null) {
             leafSize++;
         }
         getLeafSize1(root.left);
         getLeafSize1(root.right);
     }

     // 子问题思路-求叶子结点个数
     int getLeafSize2(Node root) {
         if (root == null) return 0;
         if (root.left == null && root.right == null) {
             return 1;
         }
         return getLeafSize2(root.left) + getLeafSize2(root.right);
     }

     // 子问题思路-求第 k 层结点个数
     int getKLevelSize(Node root, int k) {
         if (root == null) return 0;
         if (k == 1) {
             return 1;
         }
         return getKLevelSize(root.left, k - 1)
                 + getKLevelSize(root.right, k - 1);
     }

     int getHeight(Node root) {//求二叉树的最大深度
         if (root == null) {
             return 0;
         }
         int left = getHeight(root.left);
         int right = getHeight(root.right);
         if (left > right) {
             return left + 1;
         }
         return right + 1;
     }

     /*Node find(Node root, int val) {//没写完//寻找标准值
         if (root == null) {
             return null;
         }
         if (root.val == val) {
             return root;
         }
         Node ret1 = find(root.left, val) {
             //if()
         }
         return null;
     }*/

     boolean judge(Node root, Node root2) {
         if (root == null && root2 != null || root != null && root2 == null) {//判断两树是否相同
             return false;
         }
         if (root == null && root2 == null) {
             return true;
         }
         if (root.val != root2.val) {
             return false;
         }
         return judge(root.left, root2.left)&&judge(root.right, root2.right);
     }
     boolean judgeDouble(Node a,Node b){
         if(judge(a,b)){
             return true;
         }
        if (judgeDouble(a.left,b) || judgeDouble(a.right,b) == true){
            return true;
        }return false;
     }
   /*  boolean treeBanlance(Node root){//判断一个树是否是平衡树//未完！
         if(root == null){
             return true;
         }

     }*/
     void leveOrderTraversal(Node root){//节点打印，还是要重写，这个不对
         if (root == null){
             return;
         }
         Queue<Node> queue = new LinkedList<>();
         queue.offer(root);
         while (!queue.isEmpty()){
             Node cur = queue.poll();
             System.out.println(cur);
             if(root.left != null){
                 queue.offer(cur.left) ;                          //leveOrderTraversal(root.left);
             }
             if (root.right != null){
                 queue.offer(cur.right);
             }
         }

     }
 }

