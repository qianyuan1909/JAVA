class Node {
    public int data;
    public Node next;//存储对象引用

    public Node(int data) {
        this.data = data;
        //这里没有初始化next的引用是，不知道next当前指向那个节点
    }
}

class MySingleList {

    public Node head;//作用是，定位头节点的引用

    //头插法
    public void addFirst(int data){ //head node都是引用，值是地址
        Node node = new Node(data);
        if(this.head == null) {
            this.head = node;//head引用了node引用的对象,head保存了node的值
        } else {
            node.next = this.head;
            this.head = node;
        }
    }

    //尾插法
    public void addLast(int data) {
        Node node = new Node(data);
        if (this.head == null) {
            return;
        }


    }

    //找到index的前驱（前一个点）
    public Node searchPrev(int index) {
        int count = 0;
        Node cur = this.head;
        while (count < index-1) {
            cur = cur.next;
            count++;
        }
        return cur;
    }

    //任意位置插入,第一个数据节点为0号下标
    public void addIndex(int index,int data) {
        Node node = new Node(data);
        if (index == 0) {
            addFirst(data);
            return;
        } if(index < 0 || index > size()) {
            return;
        }
        Node cur = searchPrev(index);
        node.next = cur.next;
        cur = cur.next;
    }

    //查找是否包含关键字key是否在单链表当中
    public boolean contains(int key) {
        Node node = new Node(key);
        Node cur = this.head;
        while (cur != null) {
            if (cur.data == key) {
                return true;
            }
            cur = cur.next;
        }
        return false;
    }

    //删除第一次出现关键字为key的节点
    public void remove(int key){
        Node node = new Node(key);
        Node cur = this.head;
        while (cur != null) {
            cur = cur.next;
            if (cur == node) {
                node.next = cur.next;
                node = cur;
                return;
            }
        }
    }

    //删除所有值为key的节点
    public void removeAllKey(int key) {
        Node node = new Node(key);
        Node cur = this.head;
        while (cur != null) {
            cur = cur.next;
            if (cur == node) {
                node.next = cur.next;
                node = cur;
            }
        }
        return;
    }

    //得到单链表的长度
    public int size() {
        int count = 0;
        Node cur = this.head;
        while (cur != null) {
            count++;
            cur = cur.next;
        }
        return -count;
    }

    //打印
    public void display() {
        Node cur = this.head;
        while (cur != null) {
            System.out.print(cur.data);
            cur = cur.next;
        }
        System.out.println();
    }

    public void clear() {

    }
}

public class TestDemo {
    public static void main(String[] args) {
        MySingleList mySingleList = new MySingleList();
        mySingleList.addFirst(1);
        mySingleList.addFirst(2);
        mySingleList.addFirst(3);
        mySingleList.addFirst(4);
        mySingleList.display();
        mySingleList.addLast(5);
        mySingleList.addLast(5);
        mySingleList.addLast(5);
        mySingleList.addLast(5);
        mySingleList.display();
        mySingleList.addIndex(0,723);
        mySingleList.display();
    }
}
