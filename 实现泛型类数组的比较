import java.util.ArrayList;
//泛型的特点：1.
class Gla<T extends Comparable<T>>{//写一个泛型实现任意类型数组的比较
    public T maxValue(T[] array ){
        T max = array[0];
        for (int i = 0;i < array.length;i++){
            if(array[i].compareTo(max) > 0){
                max = array[i];
            }
        }
        return max;
    }
}
//泛型方法，可以直接通过类名访问方法
class Gla2<T extends Comparable<T>>{//写一个泛型实现任意类型数组的比较
    public static <T extends Comparable<T>> T maxValue(T[] array ){//static指定类型
        T max = array[0];
        for (int i = 0;i < array.length;i++){
            if(array[i].compareTo(max) > 0){
                max = array[i];
            }
        }
        return max;
    }
}
class  Myprint<T>{
    public  void printf(ArrayList<T> list){
        for(T val : list){
            System.out.println(val);
        }
    }
}
public class TestDemo {
    public static void main(String[] args) {//
        Integer[] array = {1,23,45,67,13,2,456,78};//写成包装类
        Gla<Integer> gla = new Gla<>();//尖括号中存放的的是输入的类型，对泛型方法初始化
        System.out.println(gla.maxValue(array));
        System.out.println(Gla2.maxValue(array));
        Myprint<Integer> arraylist = new Myprint<>();
        ArrayList<Integer> arrayList = new ArrayList<>();
        arrayList.add(10);
        arrayList.add(20);
        arrayList.add(30);
        arraylist.printf(arrayList);
    }
}
