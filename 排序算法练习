import java.util.Arrays;

public class TestDemo {
    public static void arraysort(int[] array){//直接插入排序是一个稳定的排序
        /////一个稳定的排序可以变成不稳定的排序
        ////本来不稳定的不能变成稳定的
        ///时间复杂度O(n^2),最坏情况下,数组中的数据是无序的
        ///做最好情况下O（N），数组有序的时候
        ///空间复杂度O(1)
        ///特点：越有序，越快
        for (int i = 1; i < array.length;i++){
            int tmp = array[i];
            int j = i - 1;
            for (;j >= 0;j--){///j--一直在执行
                if(array[j] > tmp){
                    array[j + 1] = array[j];///前面比后面大的时候，把前面的值赋给后面的
                }else{
                    //array[j+1] =tmp;10比8大，进行交换，j--走到7，发现8比7大，此刻应该交换7和8的位置
                    //
                    break;
                }
            }///if执行完了之后直接到这来，
            array[j+1] =tmp;/////不做任何动作
        }
    }
    ////希尔排序
    ///不稳定排序
    ///时间复杂度O（N^1.3~1.5）
    ///O（1）
    public static void shellSort(int[] array){
        int[] drr = {5,3,1};
        for (int i = 0;i < drr.length; i++){
           shell (array,drr[i]);
        }
    }
    /////希尔排序
    public static void shell(int[] array,int gap) {
        for (int i = gap; i < array.length; i=i+1) {
            int tmp = array[i];///把1换成gap
            int j = i-gap;
            for (; j >= 0 ; j=j-gap) {
                if(array[j] > tmp) {
                    array[j+gap] = array[j];
                }else {
                    //array[j+1] = tmp;
                    break;
                }
            }
            array[j+gap] = tmp;
        }
    }
    //////选择排序
    //定义
    ///时间复杂度O（N^2）
    ///空间复杂度O(1)
    ///不稳定，有跳跃性交换
    public static void selectSort(int[] array){
        for(int i = 0; i < array.length;i++){
            for(int j = i - 1;j < array.length;j++){
                if(array[i] > array[j]){
                    int tmp = array[i];
                    array[i] = array[j];
                    array[j] = tmp;
                }
            }
        }
    }
    public static void adjustDown(int[]array,int parent,int len){
        int child = 2 * parent+1;
        while (child < len){
            if (child+1 < len && array[child] < array[child+1]){
                child++;
            }
            if (array[child] > array[parent]){
                int tmp = array[parent];
                array[child] = array[parent];
                array[parent] = tmp;
                parent = child;
                child = 2 * parent+1;
            }else {
                break;
            }
        }
    }
    public static void creatHeap(int[] array){
        for(int i = (array.length-1-1)/2;i >= 0;i--){
            adjustDown(array,i,array.length);
        }
    }
    ////堆排序
    ///时间复杂度N*log2(N)
    ///空间复杂度O(1)
    ///不稳定
    public static void heapSort(int[] array){
         creatHeap(array);///创建一个大根堆
        int end = array.length - 1;
        while (end > 0){
            int tmp = array[0];
            array[0] = array[end];
            array[end] = tmp;
            adjustDown(array,0,end);//

        }

    }
    public static int partion(int[] array,int low,int high){
        return -1;
    }
    public static void quick(int[]array,int low,int high){
          if(low >= high){
              return;
          }
          int par = partion(array,low,high);
          quick(array,low,par-1);
          quick(array,par+1,high);
    }
///////快速排序
    public static void  quickSort(int[]array){
        quick(array,0,array.length-1);
    }
    public static void main(String[] args) {
        int[] array = {10,7,3,6,8,55,66,77,89,22,33,42,11,55};
        System.out.println(Arrays.toString(array));
        arraysort(array);
        /////调用插入排序
        System.out.println(Arrays.toString(array));
        shellSort(array);
        System.out.println(Arrays.toString(array));///希尔排序
    }
}
