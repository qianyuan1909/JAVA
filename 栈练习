class MyStack {

    private Queue<Integer> qu1;
    private Queue<Integer> qu2;
    public int usedSize;

    /** Initialize your data structure here. */
    public MyStack() {
        qu1 = new LinkedList<>();
        qu2 = new LinkedList<>();
    }

    /** Push element x onto stack. */
    public void push(int x) {
        //1、谁不为空  入到哪个队列就好了
        //2、两个都为空   放到第一个qu1当中
        if(!qu1.isEmpty()) {
            qu1.offer(x);
        }else if(!qu2.isEmpty()) {
            qu2.offer(x);
        }else {
            qu1.offer(x);
        }
        usedSize++;
    }

    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        if(empty()) {
            return -1;
        }
        int size = usedSize;
        if(!qu1.isEmpty()) {
            for (int i = 0; i < size-1; i++) {
                /*int tmp = qu1.poll();
                qu2.offer(tmp);*/
                qu2.offer(qu1.poll());
            }
            usedSize--;
            return qu1.poll();
        }else {
            for (int i = 0; i < size-1; i++) {
                qu1.offer(qu2.poll());
            }
            usedSize--;
            return qu2.poll();
        }
    }

    /** Get the top element. */
    public int top() {
        if(empty()) {
            return -1;
        }
        int tmp = -1;
        int size = usedSize;
        if(!qu1.isEmpty()) {
            for (int i = 0; i < size ; i++) {
                tmp = qu1.poll();
                qu2.offer(tmp);
            }
        }else {
            for (int i = 0; i < size; i++) {
                tmp = qu2.poll();
                qu1.offer(tmp);
            }
        }
        return tmp;
    }

    /** Returns whether the stack is empty. */
    public boolean empty() {
        if(qu1.isEmpty() && qu2.isEmpty())
            return true;
        return false;
    }
}

class MyQueue {

    private Stack<Integer> s1;
    private Stack<Integer> s2;

    /** Initialize your data structure here. */
    public MyQueue() {
        s1 = new Stack<>();//入
        s2 = new Stack<>();//出
    }

    /** Push element x to the back of queue. */
    public void push(int x) {
        s1.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(s2.empty()) {
            while (!s1.empty()){
                s2.push(s1.pop());
            }
        }
        if(!s2.empty()) {
           return s2.pop();
        }
        return -1;
    }

    /** Get the front element. */
    public int peek() {
        if(s2.empty()) {
            while (!s1.empty()){
                s2.push(s1.pop());
            }
        }
        if(!s2.empty()) {
            return s2.peek();
        }
        return -1;
    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        if(s1.empty() && s2.empty()) {
            return true;
        }
        return false;
    }
}

class MinStack {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;
    /** initialize your data structure here. */
    public MinStack() {
        stack = new Stack<>();//入
        minStack = new Stack<>();//出
    }
    public void push(int x) {
        //1、stack是一定需要放元素的
        stack.push(x);
        if(minStack.empty()) {
            //第一次放元素的时候
            minStack.push(x);
        }else if (x <= minStack.peek()){
            //2、最小栈当中 是否存放数据   x<= 最小栈的栈顶元素
            minStack.push(x);
        }
    }
    public void pop() {
        //1、stack是一定需要弹出元素的
        int x = stack.pop();
        //2、最小栈当中 是否弹出数据    x  ==  最小栈的栈顶元素
        if(x == minStack.peek()) {
            minStack.pop();
        }
    }
    public int top() {
        //跟最小栈没有关系
        return stack.peek();
    }

    public int getMin() {
        //每次返回最小栈的栈顶元素
        return minStack.peek();
    }
}


public class TestDemo {

    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        //只要再以下过程当中 发现不匹配  直接return
        for (int i = 0; i < s.length(); i++) {
            //1、左括号进行入栈
            char tmp = s.charAt(i);
            if(tmp == '(' || tmp == '[' || tmp == '{') {
                stack.push(tmp);
            }else {
                //2、判断栈是否为空
                if(stack.empty()) {
                    System.out.println("右括号多！");
                    return false;
                }else{
                    //3、判断栈顶元素的字符左括号和当前的字符 右括号是否匹配
                    char cur = s.charAt(i);//在遍历字符串右括号
                    char topChar = stack.peek();//栈内的
                    if(cur==')' && topChar == '(' ||
                            cur == ']' && topChar=='['
                    || cur=='}' && topChar == '{') {
                        //匹配的
                        stack.pop();
                    }else {
                        System.out.println("右括号不匹配左括号");
                        return false;
                    }
                }
            }
        }
        //4、判断栈是否为空
        if(!stack.empty()) {
            System.out.println("左括号多！");
            return false;
        }
        System.out.println("括号匹配");
        return true;
    }



    public static void main(String[] args) {

    }
}
