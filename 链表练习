class Node{//节点，每一个节点都是一个对象
    public int data;
    public Node next;//存储将来对象的引用，在此，Node是一个类
    public Node(int data){//Node类型的数据就是一个变量，或者说是一个引用//构造一个对象
        this.data = data;//根据数据创建一个节点，
    }//未初始化next是因为暂时并不知道next指向
}
class MySingleList{
    public Node head;//作用是，定位头节点的引用
    //头插法
    public void addFirst(int data){
       Node node = new Node(data); //通过data来构造一个Node的对象，
       if (this.head == null){//之前没有数据，为第一次插入
         this.head = node;//容易忘记this,head保存了node的值
       }else {//不判断if也可以
           node.next = head;
           head = node;
       }
    }
    //尾插法
    public void addLast(int data){
        Node node = new Node(data); //通过data来构造一个Node的对象
        if (this.head == null){
            this.head = node;
            return;//第一次写忘记加return
        }   Node cur = this.head;
            while(cur.next != null){
                cur = cur.next;
            }
            cur.next = node;
    }
    public Node searchPre(int index){
        int count = 0;
        Node cur = this.head;
        while(count < index-1){//代表要走index-1步
            cur = cur.next;
            count++;
        }return cur;
    }
    //任意位置插入,第一个数据节点为0号下标
    public void addIndex(int index,int data) {
        Node node = new Node(data);
         if (index < 0 ||index >size()){
             System.out.println("输入的值不合法");
             return;
         }if (index == 0){
             addFirst(data);
             return;
        }Node pre = searchPre(index);
         node.next = pre.next;
         pre.next = node;
    }
    //查找是否包含关键字key是否在单链表当中
    public boolean contains(int key) {
        Node cur = this.head;
        while(cur != null){
            if(cur.data == key){
                return true;
            }
            cur = cur.next;
        }
        return false;
    }
    public Node searchKey(int key){
        Node cur = this.head;
        while(cur != null) {
            if (key == cur.next.data) {
                return cur;
            }
        }return null;
    }
    //删除第一次出现关键字为key的节点
    public void remove(int key){
          if (this.head.data == key){
              this.head = this.head.next;
          }Node cur = searchKey(key);
          if(cur == null){
              System.out.println("没有要删除的key");
              return;
          }Node delt = cur.next;
          cur.next =delt.next;
    }
    //删除所有值为key的节点
    public void removeAllKey(int key) {
       Node cur = this.head.next;
       Node pre = this.head;
       while (cur != null){
           if (cur.data == key){
               pre.next = cur.next;
               cur = cur.next;
           }else{
               cur = cur.next;
               pre = pre.next;
           }if(this.head.data == key){
               this.head = head.next;
           }
       }
    }
    //得到单链表的长度
    public int size() {
        Node cur = this.head;
        int count = 0;
        while (cur != null){
            cur = cur.next;
            count++;
            return count;
        }return -1;
    }
    public void display() {//打印节点
        Node cur = this.head;//定义一个Node类型的引用，让它从头开始
        while (cur != null){//cur =null时，恰好打印尾节点
            System.out.println(cur.data+"");//写的时候上下交换了位置，出现了奇怪的错误
            cur = cur.next;
        }
        System.out.println();
    }
    public void clear() {
    }
    public void reversal(){//反转链表
        Node newHead = null;
        Node cur = this.head;
        Node curNext = cur.next;
        Node pre = null;
        while(cur != null){
            curNext = cur.next;
            cur.next = pre;
            pre = cur;
            cur = curNext;
        }newHead = cur;
    }
    public Node middleNode(){//寻找链表中间项
        Node fast = this.head;
        Node slow = this.head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
        }
        public Node Findkthtotail(int k){
        Node fast = this.head;
        Node slow = this.head;
        int len = size();
        if(k <= 0 || k > len)
        {
            System.out.println("输入非法");
            return null;
        }
        while(fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }return slow;
        }

    }

public class HomeWork {
    public static void main(String[] args) {
        MySingleList mySingleList = new MySingleList();
        mySingleList.addFirst(0);
        mySingleList.addFirst(2);
        mySingleList.addFirst(5);
        mySingleList.addFirst(7);
        mySingleList.addFirst(7);
        //mySingleList.removeAllKey(7);
        //Node ret = mySingleList.Findkthtotail(1);
        mySingleList.display();
        //System.out.println(ret.data);

    }
}
class ListNode {
    public int val;//public ListNode next;//节点由三个部分组成 val,next,以及前驱prevpublic ListNode prev;
    public ListNode(int val) {//通过val创建结点this.val = val;
    }
}
public class DoubleList {
    public ListNode head;//双向链表的开头public ListNode last;//双向链表的结尾//头插法public void addFirst(int data){
     ListNode node = new ListNode(data);
     if(this.head == null){
         this.head = node;//无节点时把head和last都赋值为headthis.last = node;
         return;
     }else {
         this.head.prev = node;//画图理解
         node.next = this.head;
         this.head = node;
     }
 }
  //尾插法public void addLast(int data){
     ListNode node = new ListNode(data);
     if(this.head == null){
         this.head = node;//应该把last,head都赋值为nodethis.last = node;//在这犯了一个错误，把last = null,导致空指针异常return;
     }else{
         this.last.next = node;//lat.next指向node
         node.prev = this.last;//可以参考画图理解this.last = node;
     }
    }
    public ListNode  searchIndex(int index){//寻找插入节点
        ListNode cur = this.head;
     if(index < 0 || index >size()){//非法输入return null;
     }
     while(index != 0){
         cur = cur.next;//这块不看示例自己敲出了太多BUG，比下面插入写的糟了不止一点
         index--;//减完了cur就是要插入的节点
     }return cur;
    }
    //任意位置插入,第一个数据节点为0号下标public void addIndex(int index,int data){
     ListNode node = new ListNode(data);
     ListNode cur = searchIndex(index);
        if(index == 0){//为零头插
            addFirst(data);
            return;
        }
        if(index == size()){//为尾尾插
            addLast(data);
            return;
    }
     if(cur == null) {
         return;
     }
        node.next = cur;//画图自行理解
        cur.prev.next = node;
        node.prev = cur.prev;
        cur.prev = node;
 }
 //查找是否包含关键字key是否在单链表当中public boolean contains(int key){
     ListNode cur = this.head;//设置一个cur让它遍历while(cur != null) {//当cur不等于空的时候进入循环//当找到的时候返回trueif (cur.val == key) return true;
         cur = cur.next;
     }return false;
 }
 //删除第一次出现关键字为key的节点public void remove1(int key){//自己尝试按照自己的思路写，理论上算是成功了
     ListNode cur = this.head;//定义cur准备开始遍历if(this.head.val == key){//如果头节点就是要删的值this.head = this.head.next;//直接换个头
         head.prev = null;//头节点前驱直接设为null，就能达到目的return;
         }
         while (cur != null){//当cur不为空进入循环if(cur.val == key){//判断是否要删// if(cur.next == null){//     cur.prev.next = null;//}
               cur.prev.next = cur.next;//画图理解
               cur.next.prev =cur.prev;
             }
             cur = cur.next;
         }
     }
    
 //删除所有值为key的节点public void removeAllKey(int key){//在前面的基础上去掉部分return即可
     ListNode cur = this.head;
     while (cur != null) {
         if(cur.val == key) {
             if(this.head.val == key) {
                 if(this.head.next == null) {
                     this.head = null;
                     return;
                 }
                 this.head = this.head.next;
                 this.head.prev = null;
             }else {
                 cur.prev.next = cur.next;
                 if(cur.next!=null) {
                     //当前的cur不是最后一个节点
                     cur.next.prev = cur.prev;
                 }else {
                     this.last = this.last.prev;
                 }
             }
         }
         cur = cur.next;
     }
 }
 //得到单链表的长度public int size(){
     ListNode cur = this.head;//跟单链表一样设置cur走完，count++计数
     int count = 0;
     while(cur != null){
         count++;
         cur = cur.next;
     }return count;
    }
 public void display(){
     ListNode cur = this.head;//从头开始走while (cur != null){
         System.out.println(cur.val);//打印每个节点
         cur = cur.next;
     }
 }
}
class HomeWork{
    public static void main(String[] args) {
        DoubleList doubleList1 = new DoubleList();
        doubleList1.addLast(1);
        doubleList1.addLast(2);
        doubleList1.addLast(3);
        doubleList1.addLast(4);
        doubleList1.addLast(5);
        doubleList1.display();
        System.out.println(doubleList1.size());
        System.out.println(doubleList1.contains(6));
        //doubleList1.addIndex(3,12);
        doubleList1.display();
        System.out.println("换个行");
        doubleList1.remove(5);
        doubleList1.display();
    }
}
